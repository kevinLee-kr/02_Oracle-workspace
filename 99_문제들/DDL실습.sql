--실습문제--
--도서관리 프로그램을 만들기 위한 테이블을 만들기
--이때, 제약조건에 이름을 부여할 것
-- 각 컬럼에 주석달기

--1. 출판사들에 대한 데이터를 담기 위한 출판사 테이블(TB_PUBLISHER)
--컬럼:   PUB_NO(출판사번호) --기본키(PUBLISHER_PK)
--       PUB_NAME(출판사명) --NOT NULL(PUBLICHSER_NN)
--       PHONE(출판사전화번호) --제약조건 없음
CREATE TABLE TB_PUBLISHER(
    PUB_NO NUMBER CONSTRAINT PUBLISHER_PK PRIMARY KEY,
    PUB_NAME VARCHAR2(20) CONSTRAINT PUBLISHER_NN NOT NULL,
    PHONE NUMBER
    );
--3개 정도의 샘플 데이터 추가하기
COMMENT ON COLUMN TB_PUBLISHER.PUB_NO IS '출판사 번호';
COMMENT ON COLUMN TB_PUBLISHER.PUB_NAME IS '출판사 명';
COMMENT ON COLUMN TB_PUBLISHER.PHONE IS '출판사 전화번호';
SELECT * FROM TB_PUBLISHER;
INSERT INTO TB_PUBLISHER VALUES(1,'꿈들에 출판사',8850);
INSERT INTO TB_PUBLISHER VALUES(2,'카란자 출판사',8851);
INSERT INTO TB_PUBLISHER VALUES(3,'구스구 출판사',8852);
DROP TABLE TB_PUBLISHER;
--2. 도서들에 대한 데이터를 담기 위한 도서 테이블(TB_BOOK)

--컬럼: BK_NO(도서번호) --기본키(BOOK_PK)
-- BK_TITLE(도서명) --NOT NULL(BOOK_NN_TITLE)
-- BK_AUTHOR(저자명) --NOT NULL(BOOK_NN_AUTHOR)
-- BK_PRICE(가격)
-- BK_STOCK(재고) --기본값 1로 지정
-- BK_PUB_NO(출판사번호) --외래키(BOOK_FK)(TB_PUBLISHER 테이블을 참조하도록)
-- 이때 참조하고 있는 부모데이터 삭제 시 자식데이터도 삭제되도록 설정
CREATE TABLE TB_BOOK(
    BK_NO NUMBER CONSTRAINT BOOK_PK PRIMARY KEY,
    BK_TITLE VARCHAR(10) CONSTRAINT BOOK_NN_TITLE NOT NULL,
    BK_AUTHOR VARCHAR(10) CONSTRAINT BOOK_NN_AUTHOR NOT NULL,
    BK_PRICE NUMBER,
    BK_STOCK NUMBER,
    BK_PUB_NO NUMBER CONSTRAINT BOOK_FK REFERENCES TB_PUBLISHER(PUB_NO)ON DELETE CASCADE
    );
--5개 정도의 샘플 데이터 추가하기
SELECT * FROM TB_BOOK;
COMMENT ON COLUMN TB_BOOK.BK_NO IS '도서번호';
COMMENT ON COLUMN TB_BOOK.BK_TITLE IS '도서명';
COMMENT ON COLUMN TB_BOOK.BK_AUTHOR IS '저자명';
COMMENT ON COLUMN TB_BOOK.BK_PRICE IS '가격';
COMMENT ON COLUMN TB_BOOK.NK_STOCK IS '재고';
COMMENT ON COLUMN TB_BOOK.BK_PUB_NO IS '출판사번호';
SELECT * FROM TB_BOOK;
INSERT INTO TB_BOOK VALUES(01,'꿈들에','88공사',9800,33,1);
INSERT INTO TB_BOOK VALUES(02,'카란자','88공사',8800,22,2);
INSERT INTO TB_BOOK VALUES(03,'구스구','88공사',7700,11,3);
INSERT INTO TB_BOOK VALUES(04,'모스호','88공사',6600,41,1);
INSERT INTO TB_BOOK VALUES(05,'하연강','88공사',5500,51,2);
DROP TABLE TB_BOOK;

--3. 회원에 대한 데이터를 담기 위한 회원 테이블(TB_MEMBER)

--컬럼명:   MEMBER_NO(회원번호) --기본키(MEMBER_PK)
--          MEMBER_ID(아이디) --중복금지(MEMBER_UQ)
--          MEMBER_PWD(비밀번호) NOT NULL(MEMBER_NN_PWD)
--          MEMBER_NAME(회원명) NOT NULL(MEMBER_NN_NAME)
--          GENDER(성별) 'M' 또는 'F'로 입력되도록 제한(MEMBER_CK_GEN)
--          ADDRESS(주소)
--          PHONE(연락처)
--          STATUS(탈퇴여부) --기본값으로 'N' 그리고 'Y' 혹은 'N'으로 입력되도록 제약조건(MEMBER_CK_STA)
--          ENROLL_DATE(가입일) --기본값으로 SYSDATE, NOT NULL 조건(MEMBER_NN_EN)

CREATE TABLE TB_MEMBER(
    MEMBER_NO NUMBER CONSTRAINT MEMBER_PK PRIMARY KEY,
    MEMBER_ID VARCHAR(20)CONSTRAINT MEMBER_UQ UNIQUE,
    MEMBER_PWD VARCHAR(20) CONSTRAINT MEMBER_NN_PWD NOT NULL,
    MEMBER_NAME VARCHAR(20) CONSTRAINT MEMBER_NN_NAME NOT NULL,
    GENDER  CHAR(3) CONSTRAINT MEMBER_CK_GEN CHECK(GENDER IN('M','F')),
    ADDRESS VARCHAR(20),
    PHONE NUMBER,
    STATUS CHAR(4) CONSTRAINT MEMBER_CK_STA CHECK(STATUS IN('N','Y')),
    ENROLL_DATE DATE DEFAULT SYSDATE CONSTRAINT MEMBER_NN_EN  NOT NULL
);
--5개 정도의 샘플 데이터 추가하기
COMMENT ON COLUMN TB_MEMBER.MEMBER_NO IS '회원번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_ID IS '아이디';
COMMENT ON COLUMN TB_MEMBER.MEMBER_PWD IS '비밀번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_NAME IS '회원명';
COMMENT ON COLUMN TB_MEMBER.GENDER IS '성별';
COMMENT ON COLUMN TB_MEMBER.ADDRESS IS '주소';
COMMENT ON COLUMN TB_MEMBER.PHONE IS '연락처';
COMMENT ON COLUMN TB_MEMBER.STATUS IS '탈퇴여부';
COMMENT ON COLUMN TB_MEMBER.ENROLL_DATE IS '가입일';
SELECT * FROM TB_MEMBER;
INSERT INTO TB_MEMBER VALUES(01,'꿈들에','1Q2W3E4R','이호석','M','서울시 노원구' ,01099876353,'N',DEFAULT);
INSERT INTO TB_MEMBER VALUES(02,'호랑이','1Q2W3E4R','이호석','F','서울시 노원구' ,01099524351,'N',DEFAULT);
INSERT INTO TB_MEMBER VALUES(03,'기적은','1Q2W3E4R','이호석','M','서울시 노원구' ,01078963124,'Y',DEFAULT);
INSERT INTO TB_MEMBER VALUES(04,'이루어','1Q2W3E4R','이호석','M','서울시 노원구' ,01085461269,'N',DEFAULT);
INSERT INTO TB_MEMBER VALUES(05,'진다네','1Q2W3E4R','이호석','F','서울시 노원구' ,01055846985,'Y',DEFAULT);
DROP TABLE TB_MEMBER;
--4. 도서를 대여한 회원에 대한 데이터를 담기 위한 대여목록 테이블(TB_RENT)
--컬럼:
--RENT_NO(대여번호) --기본키(RENT_PK)
--RENT_MEM_NO(대여회원번호) --외래키(RENT_FK_MEM) TB_MEMBER와 참조하도록--이때 부모데이터 삭제 시 NULL값이 되도록 옵션 설정
--RENT_BOOK_NO(대여도서번호) --외래키(RENT_FK_BOOK) TB_BOOK와 참조하도록--이때 부모데이터 삭제 시 NULL값이 되도록 옵션설정
--RENT_DATE(대여일) --기본값 SYSDATE
--샘플데이터 3개정도 추가하기
CREATE TABLE TB_RENT(
    RENT_NO NUMBER  CONSTRAINT RENT_PF PRIMARY KEY,
    RENT_MEM_NO NUMBER CONSTRAINT RENT_FK_MEM REFERENCES TB_MEMBER(MEMBER_NO) ON DELETE SET NULL,
    RENT_BOOK_NO NUMBER CONSTRAINT RENT_FK_BOOK REFERENCES TB_BOOK(BK_NO)  ON DELETE SET NULL,
    RENT_DATE DATE DEFAULT SYSDATE
    );
COMMENT ON COLUMN TB_RENT.RENT_NO IS '대여번호';
COMMENT ON COLUMN TB_RENT.RENT_MEM_NO IS '대여회원번호';
COMMENT ON COLUMN TB_RENT.RENT_BOOK_NO IS '대여도서번호';
COMMENT ON COLUMN TB_RENT.RENT_DATE IS '대여일';
SELECT * FROM TB_RENT;
INSERT INTO TB_RENT VALUES(01, 01,01,DEFAULT);
INSERT INTO TB_RENT VALUES(02, 02,02,DEFAULT);
INSERT INTO TB_RENT VALUES(03, 03,03,DEFAULT);
DROP TABLE TB_RENT;
--2번 도서를 대여한 회원의 이름, 아이디, 대여일, 반납예정일(대여일+7)을 조회하시오.

SELECT MEMBER_NAME, MEMBER_ID, RENT_DATE, (RENT_DATE+7)
FROM TB_RENT
JOIN TB_MEMBER ON(RENT_MEM_NO = MEMBER_NO)
WHERE RENT_NO = 02; 



